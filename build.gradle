apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'com.bmuschko.docker-remote-api'

defaultTasks 'image'

group               = 'com.goldin.echo'
version             = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.7
targetCompatibility = 1.7
final portNumber    = 8080
final dockerImage   = 'evgenyg/echo'

buildscript {
  // http://docs.spring.io/spring-boot/docs/1.2.1.RELEASE/reference/htmlsingle/#getting-started-gradle-installation
  repositories { jcenter() }
  dependencies { classpath( 'org.springframework.boot:spring-boot-gradle-plugin:1.2.1.RELEASE',
                            'com.bmuschko:gradle-docker-plugin:0.8.1' )}
}

repositories { jcenter() }


dependencies {
  // http://jcenter.bintray.com/org/springframework/boot/spring-boot-starter-web/
  compile( 'org.springframework.boot:spring-boot-starter-web:1.2.1.RELEASE' )
}

processResources {
    filter ( org.apache.tools.ant.filters.ReplaceTokens, tokens: [ 'portNumber' : String.valueOf( portNumber ) ])
}

/**
 * ---------------
 * Docker
 * ---------------
 */

docker {
  url      = "https://${ env( 'DOCKER_HOST' ) - 'tcp://' }"
  certPath = new File( env( 'DOCKER_CERT_PATH' ))

  registry {
    url      = 'https://index.docker.io/v1'
    username = 'evgenyg'
    password = env( 'DOCKER_PASS' )
    email    = 'evgenyg@gmail.com'
  }
}


task dockerfile( type: com.bmuschko.gradle.docker.tasks.image.Dockerfile ) {
  destFile = project.file( 'Dockerfile' )
  from           'evgenyg/java'
  maintainer     'Evgeny Goldin "evgenyg@gmail.com"'
  addFile        "build/distributions/${project.name}-${project.version}.tar", '/opt'
  defaultCommand "/opt/${project.name}-${project.version}/bin/${project.name}"
  exposePort     portNumber
}


task image( type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage ) {
  dependsOn distTar, dockerfile
  inputDir = dockerfile.destFile.parentFile
  noCache  = true
  remove   = true
  tag      = dockerImage
}


task push( type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage ) {
  dependsOn image
  imageName = dockerImage
}


def env( String name ) {
  final value = System.getenv( name )
  assert value != null, "Undefined environment variable '$name'"
  value
}


apply from: 'file:wrapper.gradle'
